plugins {
	id 'java'
	id 'maven-publish'
	id 'signing'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id("checkstyle")
}

group = 'com.styra'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'

}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.security:spring-security-web'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation group: 'com.styra', name: 'opa', version: '1.4.1'

	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.hibernate:hibernate-core:6.5.2.Final'
	implementation 'org.hibernate:hibernate-entitymanager:5.6.15.Final'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.testcontainers:testcontainers-bom:1.19.7'
	testImplementation 'org.testcontainers:testcontainers:1.19.7'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
	testImplementation 'org.mockito:mockito-core:+'
	testImplementation 'org.mockito:mockito-junit-jupiter:+'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
	implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.24'
	implementation 'org.slf4j:slf4j-api:2.0.13'
	implementation 'org.springframework.security:spring-security-core:6.3.0'
	implementation 'org.springframework:spring-context:6.1.8'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
}

apply plugin: 'application'
mainClassName = 'com.styra.opa.springboot'

tasks.named('test') {
	useJUnitPlatform()
}

// https://discuss.gradle.org/t/how-to-exclude-checkstyle-task-from-build-task/6692/5
//
// This prevents Checkstyle from running on ./gradlew build, but keeps it
// working for ./gradlew lint.
checkstyle {
	sourceSets = []
}

tasks.withType(Checkstyle) {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

task lint {
	dependsOn checkstyleTest
	dependsOn checkstyleMain

		// Note that Gradle linting is disabled because it reports problems that
		// simply cannot be fixed. For example, it insists that lombok is unused
		// when it is. It claims tomcat duplicates classes from jakarta, which may
		// be so but that's getting pulled in by Spring, so we can't control that.
}

test {
	useJUnitPlatform()
	testLogging {
		// uncomment for more verbose output during development
		//events "passed", "skipped", "failed", "standard_out", "standard_error"
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}
}


publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
          }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'com.styra.opa'
            artifactId = 'springboot'
            version = '0.0.1'

            from components.java

            pom {
                name = 'Styra Spring Boot SDK'
                description = 'SDK enabling Spring Boot developers to easily integrate with the Styra API.'
                url = 'https://github.com/styrainc/opa-springboot'
                scm {
                    url = 'github.com/styrainc/opa-springboot'
                    connection = 'scm:git:ssh://git@github.com/styrainc/opa-springboot.git'
                }
                licenses { // TODO: should be apache 2
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        name = 'Styra'
                        organization = 'Styra'
                        email = 'devrel@styra.com'
                    }
                }
                organization {
                    name = 'Styra'
                    url = 'www.styra.com'
                }
            }
        }
    }
}

if (!project.hasProperty('skip.signing')) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassphrase = findProperty("signingPassphrase")
        useInMemoryPgpKeys(signingKey, signingPassphrase)
        sign publishing.publications.maven
    }
}
