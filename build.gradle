plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id("checkstyle")
}

group = 'com.styra'
version = '0.0.9'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'

    withSourcesJar()
    withJavadocJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

tasks.named("bootJar") {
    archiveClassifier = 'boot'
}

tasks.named("jar") {
    archiveClassifier = ''
}

repositories {
    mavenCentral()
}

javadoc {
    options.addBooleanOption("Xdoclint:-missing", true)
    options.links += [
        "https://styrainc.github.io/opa-java/javadoc/",
        "https://docs.spring.io/spring-security/site/docs/current/api/",
        "https://docs.spring.io/spring-boot/api/java/",
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework:spring-context'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.testcontainers:testcontainers-bom:1.19.8'
    testImplementation 'org.testcontainers:testcontainers:1.19.8'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.8'

    api group: 'com.styra', name: 'opa', version: '1.8.0'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
    implementation 'org.slf4j:slf4j-api:2.0.13'
}

apply plugin: 'application'
mainClassName = 'com.styra.opa.springboot'

tasks.named('test') {
    useJUnitPlatform()
}

// https://discuss.gradle.org/t/how-to-exclude-checkstyle-task-from-build-task/6692/5
//
// This prevents Checkstyle from running on ./gradlew build, but keeps it
// working for ./gradlew lint.
checkstyle {
    sourceSets = []
}

tasks.withType(Checkstyle) {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

task lint {
    dependsOn checkstyleTest
    dependsOn checkstyleMain

    // Note that Gradle linting is disabled because it reports problems that
    // simply cannot be fixed. For example, it insists that lombok is unused
    // when it is. It claims tomcat duplicates classes from jakarta, which may
    // be so but that's getting pulled in by Spring, so we can't control that.
}

test {
    useJUnitPlatform()
    exclude 'com/styra/opa/springboot/autoconfigure/properties/ModifiedSystemEnvOPAPropertiesTest.class'
    testLogging {
        // uncomment for more verbose output during development
        //events "passed", "skipped", "failed", "standard_out", "standard_error"
    }
}
tasks.register("testModifiedSystemEnvProperties", Test) {
    useJUnitPlatform()
    group = "verification"
    include 'com/styra/opa/springboot/autoconfigure/properties/ModifiedSystemEnvOPAPropertiesTest.class'
    doFirst {
        systemProperty 'opa.url', 'http://localhost:8183'
        environment 'OPA_PATH', 'foo/bar2'
    }
    doLast {
        systemProperties.remove('opa.url')
        environment.remove('OPA_PATH')
    }
}
test.finalizedBy(testModifiedSystemEnvProperties)

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}


publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
          }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'com.styra.opa'
            artifactId = 'springboot'
            version = version

            from components.java

            pom {
                name = 'OPA Spring Boot SDK'
                description = 'The Styra-supported driver to connect Spring Boot applications to Open Policy Agent (OPA) and Enterprise OPA deployments'
                url = 'https://github.com/styrainc/opa-springboot'
                scm {
                    url = 'github.com/styrainc/opa-springboot'
                    connection = 'scm:git:ssh://git@github.com/styrainc/opa-springboot.git'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Styra'
                        organization = 'Styra'
                        email = 'devrel@styra.com'
                    }
                }
                organization {
                    name = 'Styra'
                    url = 'www.styra.com'
                }
            }
        }
    }
}

if (!project.hasProperty('skip.signing')) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassphrase = findProperty("signingPassphrase")
        useInMemoryPgpKeys(signingKey, signingPassphrase)
        sign publishing.publications.maven
    }
}
